{"version":3,"sources":["types/types.js","reducers/authReducer.js","reducers/patientReducer.js","reducers/uiReducer.js","reducers/rootReducer.js","store/store.js","routers/PrivateRoute.js","routers/PublicRoute.js","hooks/useForm.js","helpers/fetch.js","helpers/preparePatients.js","actions/patients.js","actions/auth.js","components/assets/componentsStyles.js","components/auth/LoginScreen.js","actions/ui.js","components/ui/DeletePatientFab.js","helpers/validateCPF.js","components/patients/PatientsModal.js","components/ui/AddNewFab.js","components/ui/Navbar.js","components/patients/PatientsScreen.js","components/auth/RegisterScreen.js","routers/AppRouter.js","DoctorApp.js","index.js"],"names":["types","initialState","checking","patients","activePatient","modalOpen","activeUser","rootReducer","combineReducers","ui","state","action","type","payload","patient","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","PrivateRoute","isAuthenticated","Component","component","rest","props","to","PublicRoute","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","preparePatients","patientAddNew","patientUpdated","patientDeleted","patientLoaded","checkingFinish","login","user","startLogout","dispatch","clear","logout","useStyles","makeStyles","theme","root","margin","spacing","title","color","fontWeight","textAlign","container","backgroundColor","border","boxShadow","display","flexDirection","width","form","alignItems","textField","marginBottom","button","height","navbar","justifyContent","padding","cursor","dateField","marginTop","LoginScreen","useDispatch","classes","lEmail","lPassword","formLoginValues","handleLoginInputChange","className","Container","maxWidth","onSubmit","email","password","preventDefault","a","resp","json","ok","setItem","Date","getTime","uid","Swal","fire","msg","TextField","onChange","label","variant","Button","uiOpenModal","uiCloseModal","DeletePatientFab","clickedPatient","onClick","console","log","location","reload","validateCPF","cpfString","validated","length","replace","sum","i","parseInt","substring","customStyles","content","top","left","right","bottom","Modal","setAppElement","PatientsModal","initPatient","cpf","date","moment","format","useSelector","setNameIsValid","formValues","setFormValues","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","ariaHideApp","trim","icon","text","getState","_id","patientStartAddNew","defaultValue","helperText","AddNewFab","Navbar","AppBar","position","PatientsScreen","useEffect","rows","push","TableContainer","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","onDoubleClick","scope","RegisterScreen","rName","rEmail","rCPF","rDate","rPassword1","rPassword2","formRegisterValues","handleRegisterInputChange","pattern","AppRouter","exact","path","DoctorApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.574c4693.chunk.js","sourcesContent":["export const types = {\n  uiOpenModal: '[ui] Open modal',\n  uiCloseModal: '[ui] Close modal',\n\n  patientSetActive: '[patient] Set Active',\n  patientLogout: '[patient] Logout patient',\n\n  patientStartAddNew: '[patient] Start add new',\n  patientAddNew: '[patient] Add new',\n  patientClearActivePatient: '[patient] Clear active patient',\n  patientUpdated: '[patient] Patient updated',\n  patientDeleted: '[patient] Patient deleted',\n  patientLoaded: '[patient] Patients loaded',\n\n  authCheckingFinish: '[auth] Finish checking login state',\n  authStartLogin: '[auth] Start login',\n  authLogin: '[auth] Login',\n  authStartRegister: '[auth] Start Register',\n  authStartStartTokenRenew: '[auth] Start token renew',\n  authLogout: '[auth] Logout',\n};\n","import { types } from '../types/types';\n\nconst initialState = {\n  checking: true,\n};\n\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.authLogin:\n      return {\n        ...state,\n        ...action.payload,\n        checking: false,\n      };\n\n    case types.authCheckingFinish:\n      return {\n        ...state,\n        checking: false,\n      };\n\n    case types.authLogout:\n      return {\n        checking: false,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { types } from '../types/types';\n\nconst initialState = {\n  patients: [],\n  activePatient: null,\n};\n\nexport const patientReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.patientSetActive:\n      return {\n        ...state,\n        activePatient: action.payload,\n      };\n\n    case types.patientAddNew:\n      return {\n        ...state,\n        patients: [...state.patients, action.payload],\n      };\n\n    case types.patientClearActivePatient:\n      return {\n        ...state,\n        activePatient: null,\n      };\n\n    case types.patientUpdated:\n      return {\n        ...state,\n        patients: state.patients.map(e =>\n          e.id === action.payload.id ? action.payload : e\n        ),\n      };\n\n    case types.patientDeleted:\n      return {\n        ...state,\n        patients: state.patients.filter(e => e.id !== action.payload['_id']),\n        activePatient: null,\n      };\n\n    case types.patientLoaded:\n      return {\n        ...state,\n        patients: [...action.payload],\n      };\n\n    case types.patientLogout:\n      return {\n        ...initialState,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { types } from '../types/types';\n\nconst initialState = {\n  modalOpen: false,\n  activeUser: '',\n};\n\nexport const uiReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.uiOpenModal:\n      return {\n        ...state,\n        modalOpen: true,\n        activeUser: action.payload,\n      };\n\n    case types.uiCloseModal:\n      return {\n        ...state,\n        modalOpen: false,\n        activeUser: '',\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport { authReducer } from './authReducer';\nimport { patientReducer } from './patientReducer';\nimport { uiReducer } from './uiReducer';\n\nexport const rootReducer = combineReducers({\n  ui: uiReducer,\n  patient: patientReducer,\n  auth: authReducer,\n});\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { rootReducer } from '../reducers/rootReducer';\n\nconst composeEnhancers =\n  (typeof window !== 'undefined' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const PrivateRoute = ({\n  isAuthenticated,\n  component: Component,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      component={props =>\n        isAuthenticated ? <Component {...props} /> : <Redirect to=\"/login\" />\n      }\n    />\n  );\n};\n\nPrivateRoute.propTypes = {\n  isAuthenticated: PropTypes.bool.isRequired,\n  component: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const PublicRoute = ({\n  isAuthenticated,\n  component: Component,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      component={props =>\n        isAuthenticated ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n};\n\nPublicRoute.propTypes = {\n  isAuthenticated: PropTypes.bool.isRequired,\n  component: PropTypes.func.isRequired,\n};\n","import { useState } from 'react';\n\nexport const useForm = (initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const reset = () => {\n    setValues(initialState);\n  };\n\n  const handleInputChange = ({ target }) => {\n    setValues({\n      ...values,\n      [target.name]: target.value,\n    });\n  };\n\n  return [values, handleInputChange, reset];\n};\n","const baseUrl = process.env.REACT_APP_API_URL;\n\nconst fetchWithoutToken = (endpoint, data, method = 'GET') => {\n  const url = `${baseUrl}/${endpoint}`;\n\n  if (method === 'GET') {\n    return fetch(url);\n  } else {\n    return fetch(url, {\n      method,\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n  }\n};\n\nconst fetchWithToken = (endpoint, data, method = 'GET') => {\n  const url = `${baseUrl}/${endpoint}`;\n  const token = localStorage.getItem('token') || '';\n\n  if (method === 'GET') {\n    return fetch(url, {\n      method,\n      headers: {\n        'x-token': token,\n      },\n    });\n  } else {\n    return fetch(url, {\n      method,\n      headers: {\n        'Content-type': 'application/json',\n        'x-token': token,\n      },\n      body: JSON.stringify(data),\n    });\n  }\n};\n\nexport { fetchWithoutToken, fetchWithToken };\n","export const preparePatients = (patients = []) => {\n  return patients.map(e => ({\n    ...e,\n  }));\n};\n","import Swal from 'sweetalert2';\n\nimport { types } from '../types/types';\nimport { fetchWithToken } from '../helpers/fetch';\nimport { preparePatients } from '../helpers/preparePatients';\n\nexport const patientStartAddNew = patient => {\n  return async (dispatch, getState) => {\n    const { uid, name } = getState().auth;\n\n    try {\n      const resp = await fetchWithToken('list', patient, 'POST');\n      const body = await resp.json();\n\n      if (body.ok) {\n        patient.id = body.patient.id;\n        patient.user = {\n          _id: uid,\n          name: name,\n        };\n        dispatch(patientAddNew(patient));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst patientAddNew = patient => ({\n  type: types.patientAddNew,\n  payload: patient,\n});\n\nexport const patientSetActive = patient => ({\n  type: types.patientSetActive,\n  payload: patient,\n});\n\nexport const patientClearActivePatient = () => ({\n  type: types.patientClearActivePatient,\n});\n\nexport const patientStartUpdate = patient => {\n  return async dispatch => {\n    try {\n      const resp = await fetchWithToken(`list/${patient.id}`, patient, 'PUT');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(patientUpdated(patient));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst patientUpdated = patient => ({\n  type: types.patientUpdated,\n  payload: patient,\n});\n\nexport const patientStartDelete = patient => {\n  return async dispatch => {\n    try {\n      const resp = await fetchWithToken(`list/${patient['_id']}`, {}, 'DELETE');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(patientDeleted(patient));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst patientDeleted = patient => ({\n  type: types.patientDeleted,\n  payload: patient,\n});\n\nexport const patientStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchWithToken('list');\n      const body = await resp.json();\n\n      const patients = preparePatients(body.patients);\n      dispatch(patientLoaded(patients));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst patientLoaded = patients => ({\n  type: types.patientLoaded,\n  payload: patients,\n});\n\nexport const patientLogout = () => ({ type: types.patientLogout });\n","import Swal from 'sweetalert2';\nimport { fetchWithToken, fetchWithoutToken } from '../helpers/fetch';\nimport { types } from '../types/types';\nimport { patientLogout } from './patients';\n\nexport const startLogin = (email, password) => {\n  return async dispatch => {\n    const resp = await fetchWithoutToken('auth', { email, password }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n\n      dispatch(\n        login({\n          uid: body.uid,\n          name: body.name,\n        })\n      );\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\n\nexport const startRegister = (name, email, date, cpf, password) => {\n  return async dispatch => {\n    const resp = await fetchWithoutToken(\n      'auth/new',\n      { name, email, date, cpf, password },\n      'POST'\n    );\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n\n      dispatch(\n        login({\n          uid: body.uid,\n          name: body.name,\n        })\n      );\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\n\nexport const startChecking = () => {\n  return async dispatch => {\n    const resp = await fetchWithToken('auth/renew');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n\n      dispatch(\n        login({\n          uid: body.uid,\n          name: body.name,\n        })\n      );\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish,\n});\n\nconst login = user => ({\n  type: types.authLogin,\n  payload: user,\n});\n\nexport const startLogout = () => {\n  return dispatch => {\n    localStorage.clear();\n\n    dispatch(patientLogout());\n    dispatch(logout());\n  };\n};\n\nconst logout = () => ({ type: types.authLogout });\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  title: {\n    color: 'black',\n    fontWeight: 'bold',\n    margin: '15px',\n    textAlign: 'center',\n  },\n  container: {\n    backgroundColor: 'white',\n    border: '1px solid black',\n    boxShadow: '0 2px 10px 4px #5014ff45',\n    display: 'flex',\n    flexDirection: 'column',\n    width: '300px !important',\n  },\n  form: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '10px',\n  },\n  textField: {\n    marginBottom: '15px !important',\n    width: '100%',\n  },\n  button: {\n    margin: '5px !important',\n    height: '56px',\n    width: '229px',\n  },\n  navbar: {\n    color: 'white',\n    display: 'flex',\n    flexDirection: 'row !important',\n    justifyContent: 'space-around',\n    padding: '10px 0',\n  },\n  cursor: {\n    cursor: 'pointer',\n  },\n  dateField: {\n    flexDirection: 'column-reverse !important',\n    marginBottom: '15px !important',\n    marginTop: '0',\n    width: '100%',\n  },\n}));\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\n\nimport { useForm } from '../../hooks/useForm';\nimport { startLogin } from '../../actions/auth';\nimport { useStyles } from '../assets/componentsStyles';\n\nexport const LoginScreen = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const [formLoginValues, handleLoginInputChange] = useForm({\n    lEmail: '',\n    lPassword: '',\n  });\n\n  const { lEmail, lPassword } = formLoginValues;\n\n  const handleLogin = e => {\n    e.preventDefault();\n    dispatch(startLogin(lEmail, lPassword));\n  };\n\n  return (\n    <div className=\"container\">\n      <Container className={classes.container} maxWidth=\"sm\">\n        <h3 className={classes.title}>Fazer login</h3>\n        <form className={classes.form} onSubmit={handleLogin}>\n          <TextField\n            className={classes.textField}\n            id=\"email-id\"\n            name=\"lEmail\"\n            value={lEmail}\n            onChange={handleLoginInputChange}\n            label=\"E-mail\"\n            variant=\"outlined\"\n          />\n          <TextField\n            className={classes.textField}\n            id=\"password-id\"\n            name=\"lPassword\"\n            value={lPassword}\n            onChange={handleLoginInputChange}\n            label=\"Senha\"\n            variant=\"outlined\"\n          />\n          <Button\n            className={classes.button}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n          >\n            Acessar\n          </Button>\n          <Link className=\"link\" to=\"/register\">\n            Criar novo usuario\n          </Link>\n        </form>\n      </Container>\n    </div>\n  );\n};\n","import { types } from '../types/types';\n\nexport const uiOpenModal = patient => ({\n  type: types.uiOpenModal,\n  payload: patient,\n});\nexport const uiCloseModal = () => ({ type: types.uiCloseModal });\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nimport { patientStartDelete } from '../../actions/patients';\nimport { useStyles } from '../assets/componentsStyles';\nimport { uiCloseModal } from '../../actions/ui';\n\nexport const DeletePatientFab = ({ clickedPatient }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(patientStartDelete(clickedPatient[0]));\n    dispatch(uiCloseModal());\n    window.location.reload();\n  };\n\n  return (\n    <Button\n      className={classes.button}\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={handleDelete}\n    >\n      <i className=\"fas fa-trash mr\"></i>\n      <span> Apagar paciente</span>\n    </Button>\n  );\n};\n","/*\n *  Validates a CPF number\n *  @param   String:  cpfString     // User CPF (just numbers or formated(000.000.000-00))\n *  @return  Boolean: success/false // Returns if is valid\n *  Reference and logic: https://www.devmedia.com.br/validar-cpf-com-javascript/23916\n *  Official code: http://www.receita.fazenda.gov.br/aplicacoes/atcta/cpf/funcoes.js\n */\n\nexport const validateCPF = cpfString => {\n  let validated = false; // Start with false\n\n  // Checking cpf lenght\n  if (cpfString.length !== 14 && cpfString.length !== 11) {\n    return validated;\n  }\n\n  // Checking for \"formated cpf (000.000.000-00)\" and replace \"points\"\n  if (cpfString.length === 14) {\n    cpfString = cpfString.replace('.', '');\n    cpfString = cpfString.replace('.', '');\n    cpfString = cpfString.replace('-', '');\n  }\n\n  // Variables to check cpf valid (sum and rest)\n  let sum = 0,\n    rest = 0;\n\n  // Checking for \"null\" CPF\n  if (cpfString === '00000000000') {\n    return validated;\n  }\n\n  // sum numbers\n  for (let i = 1; i <= 9; ++i) {\n    sum += parseInt(cpfString.substring(i - 1, i)) * (11 - i);\n  }\n\n  // Getting rest\n  rest = (sum * 10) % 11;\n\n  if (rest == 10 || rest == 11) {\n    rest = 0;\n  }\n\n  if (rest != parseInt(cpfString.substring(9, 10))) {\n    return validated;\n  }\n\n  validated = true;\n  return validated;\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Modal from 'react-modal';\nimport moment from 'moment';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\n\nimport { uiCloseModal } from '../../actions/ui';\nimport { useStyles } from '../assets/componentsStyles';\nimport {\n  patientClearActivePatient,\n  patientStartUpdate,\n  patientStartAddNew,\n} from '../../actions/patients';\nimport { DeletePatientFab } from '../ui/DeletePatientFab';\nimport { validateCPF } from '../../helpers/validateCPF';\nimport Swal from 'sweetalert2';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n  },\n};\n\nif (process.env.NODE_ENV !== 'test') {\n  Modal.setAppElement('#root');\n}\n\nexport const PatientsModal = ({ clickedPatient }) => {\n  const classes = useStyles();\n\n  const initPatient = {\n    name: clickedPatient && clickedPatient.length ? clickedPatient[0].name : '',\n    cpf: clickedPatient && clickedPatient.length ? clickedPatient[0].cpf : '',\n    date:\n      clickedPatient && clickedPatient.length\n        ? moment(clickedPatient[0].date).format('YYYY-MM-DD')\n        : '',\n    id: clickedPatient && clickedPatient.length ? clickedPatient[0]['_id'] : '',\n  };\n\n  const { modalOpen, activeUser } = useSelector(state => state.ui);\n  const { patients } = useSelector(state => state.patient);\n\n  const dispatch = useDispatch();\n\n  const [nameIsValid, setNameIsValid] = useState(true);\n\n  const [formValues, setFormValues] = useState({\n    initPatient,\n  });\n\n  const { name } = formValues;\n\n  const validateActiveUser = () => {\n    if (activeUser) {\n      const activePatient = patients.filter(\n        patient => patient.cpf === activeUser.cpf\n      );\n\n      return activePatient;\n    }\n\n    return false;\n  };\n\n  const handleInputChange = ({ target }) => {\n    if (clickedPatient && clickedPatient.length) {\n      setFormValues({\n        ...formValues.initPatient,\n        ...initPatient,\n        [target.name]: target.value,\n      });\n    } else {\n      setFormValues({\n        ...formValues,\n        [target.name]: target.value,\n      });\n    }\n  };\n\n  const closeModal = () => {\n    dispatch(uiCloseModal());\n    dispatch(patientClearActivePatient());\n    setFormValues(initPatient);\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if (name.trim().length < 2) {\n      return setNameIsValid(false);\n    }\n\n    if (validateCPF(initPatient.cpf)) {\n      return initPatient.cpf;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'CPF não existe',\n      });\n    }\n\n    if (clickedPatient) {\n      dispatch(patientStartUpdate(formValues));\n      window.location.reload();\n    } else {\n      dispatch(patientStartAddNew(formValues));\n    }\n\n    setNameIsValid(true);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      isOpen={modalOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      closeTimeoutMS={200}\n      className=\"modal\"\n      overlayClassName=\"modal-fondo\"\n      ariaHideApp={!process.env.NODE_ENV === 'test'}\n    >\n      <Container className={classes.container} maxWidth=\"sm\">\n        <h1> {validateActiveUser() ? 'Editar paciente' : 'Novo paciente'} </h1>\n        <hr />\n        <form className={classes.form} onSubmit={handleSubmitForm}>\n          <TextField\n            className={classes.textField}\n            label=\"Nome\"\n            variant=\"outlined\"\n            name=\"name\"\n            defaultValue={initPatient.name}\n            onChange={handleInputChange}\n          />\n          <TextField\n            type=\"date\"\n            helperText=\"Data de nascimento\"\n            className={(classes.textField, classes.dateField)}\n            label=\"\"\n            variant=\"outlined\"\n            name=\"date\"\n            defaultValue={initPatient.date}\n            onChange={handleInputChange}\n          />\n          <TextField\n            className={classes.textField}\n            label=\"CPF\"\n            variant=\"outlined\"\n            name=\"cpf\"\n            defaultValue={initPatient.cpf}\n            onChange={handleInputChange}\n          />\n\n          <Button\n            type=\"submit\"\n            className={classes.button}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            <i className=\"far fa-save mr\"></i>\n            <span>{clickedPatient ? 'Salvar' : 'Adicionar paciente'}</span>\n          </Button>\n          {clickedPatient ? (\n            <DeletePatientFab clickedPatient={clickedPatient} />\n          ) : (\n            ''\n          )}\n        </form>\n      </Container>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\nimport { uiOpenModal } from '../../actions/ui';\n\nexport const AddNewFab = () => {\n  const dispatch = useDispatch();\n\n  const handleClickNew = () => {\n    dispatch(uiOpenModal());\n  };\n\n  return (\n    <Button\n      className=\"btn__add\"\n      variant=\"contained\"\n      color=\"primary\"\n      onClick={handleClickNew}\n    >\n      <i className=\"fas fa-plus\"></i>\n    </Button>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport { startLogout } from '../../actions/auth';\nimport { useStyles } from '../assets/componentsStyles';\n\nexport const Navbar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { name } = useSelector(state => state.auth);\n\n  const handleLogout = () => {\n    dispatch(startLogout());\n  };\n  return (\n    <div>\n      <AppBar className={classes.navbar} position=\"static\">\n        <span className=\"navbar__span\">Doctor: {name}</span>\n        <Button onClick={handleLogout} color=\"inherit\">\n          <i className=\"fas fa-sign-out-alt\"> Sair</i>\n        </Button>\n      </AppBar>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { PatientsModal } from './PatientsModal';\nimport { uiOpenModal } from '../../actions/ui';\nimport { useStyles } from '../assets/componentsStyles';\nimport { patientStartLoading } from '../../actions/patients';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { Navbar } from '../ui/Navbar';\n\nexport const PatientsScreen = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const { patients } = useSelector(state => state.patient);\n  const { activeUser } = useSelector(state => state.ui);\n\n  useEffect(() => {\n    dispatch(patientStartLoading());\n  }, [dispatch]);\n\n  const onDoubleClick = patient => {\n    dispatch(uiOpenModal(patient));\n  };\n\n  const createData = (cpf, name, date) => {\n    return { cpf, name, date };\n  };\n\n  const rows = [];\n  const formatDate = 'YYYY-MM-DD';\n\n  patients.map(patient => {\n    rows.push(\n      createData(\n        patient.cpf,\n        patient.name,\n        moment(patient.date).format(formatDate)\n      )\n    );\n  });\n\n  return (\n    <div>\n      <Navbar />\n\n      <TableContainer component={Paper}>\n        <Table size=\"small\" aria-label=\"Patiens table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>CPF</TableCell>\n              <TableCell>Nome</TableCell>\n              <TableCell>Data</TableCell>\n            </TableRow>\n          </TableHead>\n\n          <TableBody className={classes.cursor}>\n            {rows.map(row => (\n              <TableRow key={row.cpf} onDoubleClick={() => onDoubleClick(row)}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.cpf}\n                </TableCell>\n                <TableCell>{row.name}</TableCell>\n                <TableCell>{row.date}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      <AddNewFab />\n\n      <PatientsModal\n        clickedPatient={\n          patients &&\n          activeUser &&\n          patients.filter(patient => patient.cpf === activeUser.cpf)\n        }\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\n\nimport { useForm } from '../../hooks/useForm';\nimport { startRegister } from '../../actions/auth';\nimport { validateCPF } from '../../helpers/validateCPF';\nimport { useStyles } from '../assets/componentsStyles';\n\nexport const RegisterScreen = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const [formRegisterValues, handleRegisterInputChange] = useForm({\n    rName: '',\n    rEmail: '',\n    rCPF: '',\n    rDate: '',\n    rPassword1: '',\n    rPassword2: '',\n  });\n\n  const {\n    rName,\n    rEmail,\n    rCPF,\n    rDate,\n    rPassword1,\n    rPassword2,\n  } = formRegisterValues;\n\n  const handleRegister = e => {\n    e.preventDefault();\n\n    if (rPassword1 !== rPassword2) {\n      return Swal.fire({\n        icon: 'Error',\n        title: 'error',\n        text: 'As senhas devem ser iguais',\n      });\n    }\n\n    if (validateCPF(rCPF)) {\n      return rCPF;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Error',\n        text: 'CPF não existe',\n      });\n    }\n\n    dispatch(startRegister(rName, rEmail, rDate, rCPF, rPassword1));\n  };\n\n  return (\n    <>\n      <Container className={classes.container} maxWidth=\"sm\">\n        <h3 className={classes.title}>Cadastra-se</h3>\n        <form className={classes.form} onSubmit={handleRegister}>\n          <TextField\n            className={classes.textField}\n            id=\"nome-id\"\n            name=\"rName\"\n            value={rName}\n            onChange={handleRegisterInputChange}\n            label=\"Nome\"\n            variant=\"outlined\"\n          />\n          <TextField\n            className={classes.textField}\n            id=\"emailReg-id\"\n            name=\"rEmail\"\n            value={rEmail}\n            onChange={handleRegisterInputChange}\n            label=\"E-mail\"\n            variant=\"outlined\"\n          />\n          <TextField\n            type=\"date\"\n            className={(classes.textField, classes.dateField)}\n            id=\"dataDeNascimento-id\"\n            name=\"rDate\"\n            value={rDate}\n            onChange={handleRegisterInputChange}\n            label=\"\"\n            variant=\"outlined\"\n            helperText=\"Data de nascimento\"\n          />\n          <TextField\n            className={classes.textField}\n            pattern=\"\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}\"\n            id=\"cpf-id\"\n            name=\"rCPF\"\n            value={rCPF}\n            onChange={handleRegisterInputChange}\n            label=\"CPF: xxx.xxx.xxx-xx\"\n            variant=\"outlined\"\n          />\n\n          <TextField\n            className={classes.textField}\n            id=\"passwordReg-id1\"\n            name=\"rPassword1\"\n            value={rPassword1}\n            onChange={handleRegisterInputChange}\n            label=\"Digite uma senha\"\n            variant=\"outlined\"\n          />\n          <TextField\n            className={classes.textField}\n            id=\"passwordReg-id2\"\n            name=\"rPassword2\"\n            value={rPassword2}\n            onChange={handleRegisterInputChange}\n            label=\"Digite a senha novamente\"\n            variant=\"outlined\"\n          />\n          <Button\n            type=\"submit\"\n            className={classes.button}\n            variant=\"contained\"\n            color=\"primary\"\n            // disabled={customValidateForm}\n          >\n            Finalizar Cadastro\n          </Button>\n          <Link className=\"link\" to=\"/login\">\n            Tem cadastro?\n          </Link>\n        </form>\n      </Container>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { PatientsScreen } from '../components/patients/PatientsScreen';\nimport { startChecking } from '../actions/auth';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\n\nexport const AppRouter = () => {\n  const dispatch = useDispatch();\n  const { checking, uid } = useSelector(state => state.auth);\n\n  useEffect(() => {\n    dispatch(startChecking());\n  }, [dispatch]);\n\n  if (checking) {\n    return (\n      <div className=\"loading-spinner\">\n        <div className=\"loading-spinner--item\">\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <PublicRoute\n            exact\n            path=\"/login\"\n            component={LoginScreen}\n            isAuthenticated={!!uid}\n          />\n          <PublicRoute\n            exact\n            path=\"/register\"\n            component={RegisterScreen}\n            isAuthenticated={!!uid}\n          />\n\n          <PrivateRoute\n            exact\n            path=\"/patients\"\n            component={PatientsScreen}\n            isAuthenticated={!!uid}\n          />\n\n          <PrivateRoute\n            exact\n            path=\"/\"\n            component={PatientsScreen}\n            isAuthenticated={!!uid}\n          />\n          <Redirect to=\"/login\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport { AppRouter } from './routers/AppRouter';\n\nexport const DoctorApp = () => {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\n\nimport { DoctorApp } from './DoctorApp';\n\nReactDOM.render(<DoctorApp />, document.getElementById('root'));\n"],"sourceRoot":""}